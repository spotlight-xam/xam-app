import * as fs from "fs";
import * as path from "path";
import ws from "ws";

import { printItem } from "./log";

type CausalRecord = ActionRecord | ResultRecord;

interface ActionRecord {
  event: "action";
  type: "press" | "typing";
  uuid: string;
}

interface ResultRecord {
  event: "result";
  type: "navigation";
  uuid: string;
}

export class CausalRecordManager {
  private causalRecords: CausalRecord[] = [];

  private reset() {
    this.causalRecords = [];
  }

  private push(record: CausalRecord) {
    this.causalRecords.push(record);

    printItem(`recorded count ${this.causalRecords.length}`);
  }

  addMessageListener(socketForApp: ws.WebSocket) {
    this.reset();
    socketForApp.on("message", (data: string) => {
      const causalRecord: CausalRecord = JSON.parse(data);
      this.push(causalRecord);
    });
  }

  async generate() {
    return detoxTestGenerate(this.causalRecords);
  }
}

const testFolderPath = path.join(process.cwd(), "e2e/test");

async function detoxTestGenerate(causalRecords: CausalRecord[]) {
  const defaultTestPath = path.join(testFolderPath, "default.test.js");
  const testPath = path.join(testFolderPath, "autoGenerated.test.js");

  const defaultTestCode = fs.readFileSync(defaultTestPath).toString();
  const generatedTestCode = causalRecords.map(
    (causalRecord) => normalizingCausalRecord(causalRecord) + "\n"
  );

  fs.writeFileSync(
    testPath,
    defaultTestCode.replace(
      "// AUTO_GENERATED_PLACEHOLDER;",
      joinWithNewLine(generatedTestCode)
    )
  );
}

function normalizingCausalRecord(causalRecord: CausalRecord) {
  switch (causalRecord.event) {
    case "action":
      switch (causalRecord.type) {
        case "press":
          return joinWithNewLine([
            isVisibleById(causalRecord),
            tabById(causalRecord),
          ]);
        case "typing":
          return joinWithNewLine([
            isVisibleById(causalRecord),
            typingById(causalRecord),
          ]);
      }
      break;
    case "result":
      return "// MOST BE IMPLEMENT";
  }
}

function joinWithNewLine(arr: string[]): string {
  return arr.map((a) => "" + a).join("\n    ");
}

function typingById(causalRecord: CausalRecord) {
  return `await element(by.id("${causalRecord.uuid}")).typeText('test');`;
}

function tabById(causalRecord: CausalRecord) {
  return `await element(by.id("${causalRecord.uuid}")).tap();`;
}

function isVisibleById(causalRecord: CausalRecord) {
  return `await expect(element(by.id("${causalRecord.uuid}"))).toBeVisible();`;
}
